git config --global user.name "Faroque"
git config --global user.email "faroque.omar@gmail.com"
git config --global push.default matching
git config --global alias.co checkout


for everyday

git init
git add .
git commit -m "This is my first commit"
git remote add origin https://github.com/faroque-tipu/day35new.git

git push -u origin master


git add .
git commit -am "23/06/2020 Update"
git push 


Generating a new SSH key

    Open Git Bash.

    Paste the text below, substituting in your GitHub email address.

    $ ssh-keygen -t ed25519 -C "your_email@example.com"

    Note: If you are using a legacy system that doesn't support the Ed25519 algorithm, use:

    $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

    This creates a new ssh key, using the provided email as a label.

    > Generating public/private ed25519 key pair.

    When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

    > Enter a file in which to save the key (/c/Users/you/.ssh/id_ed25519):[Press enter]


========================

Checking for existing SSH keys

Before you generate an SSH key, you can check to see if you have any existing SSH keys.

Note: DSA keys (SSH-DSS) are no longer supported. Existing keys will continue to function, but you cannot add new DSA keys to your GitHub account.

    Open Git Bash.

    Enter ls -al ~/.ssh to see if existing SSH keys are present:

    $ ls -al ~/.ssh
    # Lists the files in your .ssh directory, if they exist

    Check the directory listing to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following:
        id_rsa.pub
        id_ecdsa.pub
        id_ed25519.pub
